Spring integration test:
    - DI (т.к. это интеграционные тесты, то нам нужны бины зависимостей)
    - Cache context (чтобы контекст не поднимался при каждом тесте, нужно кешировать контекст)
    - Transactional management (чтобы тесты не оставляли следов в тестовых БД)

Extension model junit 5:
    - Exception handling (можно обработать возникшие исключения в тестовых методах)
    - Test instance post-processor (обработать экземпляр тестового класса до выполнения теста)
    - Conditional test execution (условие на выполнение теста, стоит его выполнять или нет)
    - Parameter resolver (DI junit'а)
    - Test lifecycle callbacks (способность внедриться в жизненный цикл теста)

Lifecycle test:
    BeforeAll -> | -> BeforeEach -> Test -> AfterEach -> | -> AfterAll
    есть возможность внедриться в каждую фазу (до BeforeAll, после BeforeAll и до BeforeEach и т.д.) для этого нужно
    реализовать необходимый функциональный интерфейс и указать его реализацию в @ExtendWith().

    Пример: MockitoExtension использует BeforeEachCallback и AfterEachCallback, чтобы внедриться в жизненный цикл и
    пройтись по полям, найти @Mock и замокать их, а AfterEachCallback используется, чтобы их обнулить. Также он
    реализует ParameterResolver, чтобы заинжектить моки

TestContext Framework
    в спринге реализован свой фреймворк для реализации интеграционных тестов. Чтобы его подключить, нужно использовать
    SpringExtension (@ExtendWith({SpringExtension.class})
    - Под капотом SpringExtension создает TestContextManager для _каждого класса_ над которым есть SpringExtension. И
    этот менеджер ответственен за интеграционный тест
    - TestContextManager устроен следующим образом:
        - TestContext - это поле, в котором хранится тестовый класс, тестовый инстанс (он тесты выполняет), тестовый
        метод. Также самое главное, там находится applicationContext (наш IoC контейнер) и вот здесь реализовано
        кеширование
        - TestExecutionListener - это позволяет внедриться в жизненный цикл тестового инстанса (BeforeAllCallback и т.д.)
